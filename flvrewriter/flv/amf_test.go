package flv

import (
	"bytes"
	"testing"
)

func TestDecodeKey(t *testing.T) {
	amf := NewAmfEncoderDecoder()
	name := amf.DecodeKey([]byte{0x00, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E})
	if name != "duration" {
		t.Errorf("DecodeKey failed, expected: duration, got: %s", name)
	}
}

func TestDecodeValFloat(t *testing.T) {
	amf := NewAmfEncoderDecoder()
	val := amf.DecodeVal([]byte{0x00, 0x40, 0x7B, 0x2C, 0x28, 0xF5, 0xC2, 0x8F, 0x5C})
	if val != 434.76000 {
		t.Errorf("DecodeVal failed, expected: 434.74000, got: %v", val)
	}
}

func TestDecodeValStr(t *testing.T) {
	amf := NewAmfEncoderDecoder()
	val := amf.DecodeVal([]byte{0x02, 0x00, 0x0D, 0x4C, 0x61, 0x76, 0x66, 0x35, 0x38, 0x2E, 0x34, 0x35, 0x2E, 0x31, 0x30, 0x30})
	if val != "Lavf58.45.100" {
		t.Errorf("DecodeVal failed, expected: Lavf58.45.100, got: %v", val)
	}
}

func TestEncodeKey(t *testing.T) {
	amf := NewAmfEncoderDecoder()
	key := amf.EncodeKey("duration")
	if len(key) != 2+8 || key[0] != 0x00 || key[1] != 0x08 || key[2] != 0x64 || key[3] != 0x75 || key[4] != 0x72 || key[5] != 0x61 || key[6] != 0x74 || key[7] != 0x69 || key[8] != 0x6F || key[9] != 0x6E {
		t.Errorf("EncodeKey failed, expected: duration, got: %+v", key)
	}
}

func TestEncodeValFloat(t *testing.T) {
	amf := NewAmfEncoderDecoder()
	val := amf.EncodeVal(434.76000)
	if len(val) != 1+8 || val[0] != 0x00 || val[1] != 0x40 || val[2] != 0x7B || val[3] != 0x2C || val[4] != 0x28 || val[5] != 0xF5 || val[6] != 0xC2 || val[7] != 0x8F || val[8] != 0x5C {
		t.Errorf("EncodeVal failed, expected: 434.74000, got: %+v", val)
	}
}

func TestEncodeValString(t *testing.T) {
	amf := NewAmfEncoderDecoder()
	val := amf.EncodeVal("Lavf58.45.100")
	if len(val) != 3+13 || val[0] != 0x02 || val[1] != 0x00 || val[2] != 0x0D || val[3] != 0x4C || val[4] != 0x61 || val[5] != 0x76 || val[6] != 0x66 || val[7] != 0x35 || val[8] != 0x38 || val[9] != 0x2E || val[10] != 0x34 || val[11] != 0x35 || val[12] != 0x2E || val[13] != 0x31 || val[14] != 0x30 || val[15] != 0x30 {
		t.Errorf("EncodeVal failed, expected: Lavf58.45.100, got: %+v", val)
	}
}

func TestEncodeMetaData(t *testing.T) {
	expectedMetaData := []byte{
		0x02, 0x00, 0x0A, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x08, 0x00, 0x00,
		0x00, 0x0b, 0x00, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x40, 0x7b, 0x2c,
		0x28, 0xf5, 0xc2, 0x8f, 0x5c, 0x00, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x00, 0x40, 0x94, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x40, 0x86,
		0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x64, 0x61, 0x74,
		0x61, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0xa0, 0xae, 0x05, 0x00, 0x92, 0xcc, 0xf7, 0x00, 0x09,
		0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0x39, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64,
		0x00, 0x40, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
		0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x02, 0x00, 0x04, 0x69, 0x73, 0x6f, 0x6d, 0x00, 0x0d, 0x6d,
		0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x03, 0x35,
		0x31, 0x32, 0x00, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62,
		0x72, 0x61, 0x6e, 0x64, 0x73, 0x02, 0x00, 0x10, 0x69, 0x73, 0x6f, 0x6d, 0x69, 0x73, 0x6f, 0x32,
		0x61, 0x76, 0x63, 0x31, 0x6d, 0x70, 0x34, 0x31, 0x00, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
		0x72, 0x02, 0x00, 0x0d, 0x4c, 0x61, 0x76, 0x66, 0x35, 0x38, 0x2e, 0x34, 0x35, 0x2e, 0x31, 0x30,
		0x30, 0x00, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x41, 0x9c, 0x60, 0x51,
		0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09}
	amf := NewAmfEncoderDecoder()
	meta := make(map[string]interface{})
	meta["duration"] = 434.76000
	meta["width"] = 1280.0
	meta["height"] = 720.0
	meta["videodatarate"] = 2135.00977
	meta["framerate"] = 25.00000
	meta["videocodecid"] = 7.0
	meta["major_brand"] = "isom"
	meta["minor_version"] = "512"
	meta["compatible_brands"] = "isomiso2avc1mp41"
	meta["encoder"] = "Lavf58.45.100"
	meta["filesize"] = 119018579.0
	debugOrder := []string{"duration", "width", "height", "videodatarate", "framerate", "videocodecid", "major_brand", "minor_version", "compatible_brands", "encoder", "filesize"}

	out := amf.EncodeMetaData(meta, debugOrder)
	if len(out) != 263 ||
		!bytes.Equal(out[:], expectedMetaData) {
		t.Errorf("EncodeMetaData failed, expected: %+v, got: % x", meta, out)
	}
}

func TestDecodeMetaData(t *testing.T) {
	scriptTagData := []byte{
		0x02, 0x00, 0x0A, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x08, 0x00, 0x00,
		0x00, 0x0b, 0x00, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x40, 0x7b, 0x2c,
		0x28, 0xf5, 0xc2, 0x8f, 0x5c, 0x00, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x00, 0x40, 0x94, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x40, 0x86,
		0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x64, 0x61, 0x74,
		0x61, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0xa0, 0xae, 0x05, 0x00, 0x92, 0xcc, 0xf7, 0x00, 0x09,
		0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0x39, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64,
		0x00, 0x40, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
		0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x02, 0x00, 0x04, 0x69, 0x73, 0x6f, 0x6d, 0x00, 0x0d, 0x6d,
		0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x03, 0x35,
		0x31, 0x32, 0x00, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62,
		0x72, 0x61, 0x6e, 0x64, 0x73, 0x02, 0x00, 0x10, 0x69, 0x73, 0x6f, 0x6d, 0x69, 0x73, 0x6f, 0x32,
		0x61, 0x76, 0x63, 0x31, 0x6d, 0x70, 0x34, 0x31, 0x00, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
		0x72, 0x02, 0x00, 0x0d, 0x4c, 0x61, 0x76, 0x66, 0x35, 0x38, 0x2e, 0x34, 0x35, 0x2e, 0x31, 0x30,
		0x30, 0x00, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x41, 0x9c, 0x60, 0x51,
		0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09}
	amf := NewAmfEncoderDecoder()
	out := amf.DecodeMetaData(scriptTagData)
	for key, val := range out {
		if key != "duration" && key != "width" && key != "height" && key != "videodatarate" && key != "framerate" && key != "videocodecid" && key != "major_brand" && key != "minor_version" && key != "compatible_brands" && key != "encoder" && key != "filesize" {
			t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, val, key, val)
			return
		}
		if key == "duration" {
			if val == 434.76000 {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 434.76, key, val)
				return
			}
		}
		if key == "width" {
			if val == 1280.0 {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 1280.0, key, val)
				return
			}
		}
		if key == "height" {
			if val == 720.0 {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 720.0, key, val)
				return
			}
		}
		if key == "videodatarate" {
			if val == 2135.00977 {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 2135.00977, key, val)
				return
			}
		}
		if key == "framerate" {
			if val == 25.00000 {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 25.00000, key, val)
				return
			}
		}
		if key == "videocodecid" {
			if val == 7.0 {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 7.0, key, val)
				return
			}
		}
		if key == "major_brand" {
			if val == "isom" {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, "isom", key, val)
				return
			}
		}
		if key == "minor_version" {
			if val == "512" {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, "512", key, val)
				return
			}
		}
		if key == "compatible_brands" {
			if val == "isomiso2avc1mp41" {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, "isomiso2avc1mp41", key, val)
				return
			}
		}
		if key == "encoder" {
			if val == "Lavf58.45.100" {
				t.Logf("DecodeMetaData success, got: %s, %v", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, "Lavf58.45.100", key, val)
				return
			}
		}
		if key == "filesize" {
			if val == 119018579.0 {
				t.Logf("DecodeMetaData success, got: %s, %f", key, val)
			} else {
				t.Errorf("DecodeMetaData failed, expected: %s, %v, got: %s, %v", key, 119018579.0, key, val)
				return
			}
		}
	}
}
